<?xml version="1.0" encoding="UTF-8"?>
<!--
    Copyright 2010 The myBatis Team

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
-->

<!--
    This is a org.mybatis.spring.sample context that shows four different ways
    to integrate with Spring. FooService* are beans that act as business
    services. All of the services implement FooService which is annotated as
    @Transactional. Each one is injected with a mapper coded/created in a
    different way: 
    userMapperBean is created with a MapperFactoryBean (has no implementation)
    userMapper is searched and registered by the MapperScannerConfigurer (has no implementation)
    userMapperDaoSupport extends SqlSessionDaoSupport
    userMapperSqlSession uses directly MyBatis API (has no transaction support)

    version: $Id: context.xml 2717 2010-10-15 15:37:00Z eduardo.macarron $
-->
<beans xmlns="http://www.springframework.org/schema/beans"
     xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
     xmlns:aop="http://www.springframework.org/schema/aop"
     xmlns:tx="http://www.springframework.org/schema/tx"
     xmlns:jdbc="http://www.springframework.org/schema/jdbc"
     xmlns:context="http://www.springframework.org/schema/context"
     xsi:schemaLocation="
     http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd
     http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
     http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-3.0.xsd
     http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
     http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd">


   
   
<!--  ============================mongoDB==========================  -->
        <!-- mongoDB的配置对象 -->
     <bean id="mongoOptions" class="com.mongodb.MongoOptions">
         <!-- 服务器是否自动重连，默认为false -->
         <property name="autoConnectRetry" value="false" />
         <!-- 对同一个服务器尝试重连的时间(毫秒)，设为0时默认使用15秒 -->
         <property name="maxAutoConnectRetryTime" value="0" />
         <!-- 与每个主机的连接数，默认为10 -->
         <property name="connectionsPerHost" value="10" />
         <!-- 连接超时时间(毫秒)，默认为10000 -->
         <property name="connectTimeout" value="10000" />
         <!-- 是否创建一个finalize方法，以便在客户端没有关闭DBCursor的实例时，清理掉它。默认为true -->
         <property name="cursorFinalizerEnabled" value="true" />
         <!-- 线程等待连接可用的最大时间(毫秒)，默认为120000 -->
         <property name="maxWaitTime" value="120000" />
         <!-- 可等待线程倍数，默认为5.例如connectionsPerHost最大允许10个连接，则10*5=50个线程可以等待，更多的线程将直接抛异常 -->
         <property name="threadsAllowedToBlockForConnectionMultiplier" value="5" />
         <!-- socket读写时超时时间(毫秒)，默认为0，不超时 -->
         <property name="socketTimeout" value="0" />
         <!-- 是socket连接在防火墙上保持活动的特性，默认为false -->
         <property name="socketKeepAlive" value="false" />
         <!-- 对应全局的WriteConcern.SAFE，默认为false -->
         <property name="safe" value="true" />
         <!-- 对应全局的WriteConcern中的w，默认为0 -->
         <property name="w" value="0" />
         <!-- 对应全局的WriteConcern中的wtimeout，默认为0 -->
         <property name="wtimeout" value="0" />
         <!-- 对应全局的WriteConcern.FSYNC_SAFE，如果为真，每次写入要等待写入磁盘，默认为false -->
         <property name="fsync" value="false" />
         <!-- 对应全局的WriteConcern.JOURNAL_SAFE，如果为真，每次写入要等待日志文件写入磁盘，默认为false -->
         <property name="j" value="false" />
      </bean>


   
        <!-- 使用工厂创建mongo实例 -->
     <bean id="mongo" class="cn.com.bettle.code.database.nosql.mongodb.morphia.MongoFactoryBean">
         <!-- mongoDB的配置对象 -->
         <property name="mongoOptions" ref="mongoOptions"/>
         
         <!-- 是否主从分离(读取从库)，默认为false，读写都在主库 -->
         <property name="readSecondary" value="false"/>
         
         <!-- 设定写策略，默认为WriteConcern.SAFE，优先级高于mongoOptions中的safe -->
         <property name="writeConcern" value="SAFE"/>
         
        <!-- 设定服务器列表，默认为localhost:27017 -->
         <property name="serverStrings">
            <array>
                 <value>${mongodb.ip}</value>
             </array>
         </property>
     </bean>


  
      <!-- 使用工厂创建morphia实例，同时完成类映射操作 -->
      <bean id="morphia" class="cn.com.bettle.code.database.nosql.mongodb.morphia.MorphiaFactoryBean" >
          <!-- 指定要扫描的POJO包路径 -->
 		  <!--     
 		  <property name="mapPackages">
              <array>
                  <value>me.watchzerg.test.morphia.pojo</value>
              </array>
          </property> 
          -->
          
          <!-- 指定要映射的类 -->
          <!-- 
          <property name="mapClasses">
              <array>
                  <value>me.watchzerg.test.morphia.pojo.Hotel</value>
                  <value>me.watchzerg.test.morphia.pojo.Address</value>
              </array>
          </property> 
          -->
          
          <!-- 扫描包时是否忽略不可用的类，默认为false -->
          <!-- <property name="ignoreInvalidClasses" value="false"/> -->
      </bean>
     
     
      <!-- 使用工厂创建datastore，同时完成index和caps的确认操作 -->
      <bean id="mongodbMorphia" class="cn.com.bettle.code.database.nosql.mongodb.morphia.DatastoreFactoryBean" >
          <property name="morphia" ref="morphia"/>
          <property name="mongo" ref="mongo"/>
         
          <!-- collection的名称 -->
          <property name="dbName" value="test"/>
          
          <!-- 用户名和密码可以为空 -->
          <property name="username" value="${mongodb.username}"/>
          <property name="password" value="${mongodb.password}"/>
          
          <!-- 是否进行index和caps的确认操作，默认为flase -->
          <property name="toEnsureIndexes" value="true"/>
          <property name="toEnsureCaps" value="true"/>
      </bean> 
     
     
     
     <!-- 使用工厂创建mongoBugu实例 -->
     <bean id="mongodbBugu" class="cn.com.bettle.code.database.nosql.mongodb.bugu.BuguFactoryBean">
         <!-- mongoDB的配置对象 -->
         <property name="mongoOptions" ref="mongoOptions"/>
         
         <!-- 是否主从分离(读取从库)，默认为false，读写都在主库 -->
         <property name="readSecondary" value="false"/>
         
         <!-- 设定写策略，默认为WriteConcern.SAFE，优先级高于mongoOptions中的safe -->
         <property name="writeConcern" value="SAFE"/>
         <!-- collection的名称 -->
         <property name="dbName" value="${mongodb.dbName}"/>
          
         <!-- 用户名和密码可以为空 -->
         <property name="username" value="${mongodb.username}"/>
         <property name="password" value="${mongodb.password}"/>
        <!-- 设定服务器列表，默认为localhost:27017 -->
         <property name="serverStrings">
            <array>
                 <value>${mongodb.ip}</value>
             </array>
         </property>
     </bean>
 <!--  ========================redis=================== -->

 
 
	<!-- jedis 连接池配置-->
	<bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">  
		<property name="maxActive"     value="1024" />  
		<property name="maxIdle"       value="100" />  
		<property name="maxWait"       value="1000" />  
		<property name="testOnBorrow"  value="true" />  
	</bean>  
	<!-- jedis 多个服务器配置-->
	<bean id="jedisShardInfo1" class="redis.clients.jedis.JedisShardInfo">  
		<constructor-arg index="0" value="${redis.ip}" />  
		<constructor-arg index="1" value="${redis.port}" type="int" />  
	</bean>	
	
	<!-- 
	<bean id="jedisShardInfo2" class="redis.clients.jedis.JedisShardInfo">  
		<constructor-arg index="0" value="${redis.ip}" />  
		<constructor-arg index="1" value="${redis.port}" type="int" />  
	</bean>	
	 -->
	
	<bean id="shardedJedisPool" class="redis.clients.jedis.ShardedJedisPool">  
		<constructor-arg index="0" ref="jedisPoolConfig" />  
		<constructor-arg index="1">
			<list>
				<ref bean="jedisShardInfo1" />
				<!-- <ref bean="jedisShardInfo2"/>-->
			</list>
		</constructor-arg>  
	</bean>
	
	
	<bean id="jedisPool" class="redis.clients.jedis.JedisPool">  
		<constructor-arg index="0" ref="jedisPoolConfig" />  
		<constructor-arg index="1" value="${redis.ip}"/>
		<constructor-arg index="2" value="${redis.port}" type="int"/>
	</bean>
	
	
	
	
	<!-- redis工厂 -->  
	<bean id="connectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory"
		>
		<property name="hostName"   value="${redis.ip}" />  
		<property name="port"       value="${redis.port}" />  
		<property name="poolConfig" ref="jedisPoolConfig" /> 

	</bean> 
     

    <!-- spring data redis -->  
    <bean id="jedisConnectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">  
        <property name="usePool" value="true"></property>  
        <property name="hostName" value="${redis.ip}" />  
        <property name="port" value="${redis.port}" />  
        <property name="password" value="" />  
        <property name="timeout" value="100000" />  
        <property name="database" value="0"></property> 
        <constructor-arg index="0" ref="jedisPoolConfig" />  
    </bean>   
      
      
    <bean id="redisSpring" class="org.springframework.data.redis.core.RedisTemplate">  
        <property name="connectionFactory" ref="jedisConnectionFactory" />  
    </bean>  
    

 
    <bean id="redisJedis" class="cn.com.bettle.code.database.nosql.redis.jedis.RedisJedisPoolFactoryBean">  
        <property name="shardedPool" ref="shardedJedisPool" /> 
        <property name="pool" ref="jedisPool" />   
    </bean> 



<!-- ==========================in-memory database================================== -->

    <!-- in-memory database and a datasource -->
    <jdbc:embedded-database id="memoryDataSource">
        <jdbc:script location="classpath:cn/com/bettle/test/memorydb/database-schema.sql"/>
        <jdbc:script location="classpath:cn/com/bettle/test/memorydb/database-test-data.sql"/>
    </jdbc:embedded-database>


    <!-- transaction manager, use JtaTransactionManager for global tx -->
    <bean id="memoryTransactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="memoryDataSource" />
    </bean>
      
        <!-- define the MyBatis SqlSessionFactory -->
    <bean id="memoryMybatis" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="memoryDataSource" />
        <property name="configLocation" value="classpath:mybatis-config.xml" />        
    </bean>


<!-- ========================oracle database==============  -->


        <bean id="oracleDataSource"   class="org.logicalcobwebs.proxool.ProxoolDataSource">  
                <property name="driver">  
                        <value>oracle.jdbc.driver.OracleDriver</value>  
                </property>  
                <property name="driverUrl">  
                        <value>${oracle.driverUrl}</value>  
                </property>  
                <property name="user" value="${oracle.user}"/>  
                <property name="password" value="${oracle.password}"/>  
                <property name="alias" value="${oracle.alias}"/>  
                <property name="maximumActiveTime" value="1000000"/>  
                <property name="trace" value="true"/>
    			<property name="verbose" value="true"/>
                <property name="prototypeCount" value="5"/>  
                <property name="houseKeepingSleepTime" value="90000"/>
                <property name="maximumConnectionCount" value="100"/>  
                <property name="minimumConnectionCount" value="10"/>  
                <property name="simultaneousBuildThrottle" value="50"/>  
                <property name="houseKeepingTestSql" value="select CURRENT_DATE from dual"/>  
        </bean>  

    <bean id="oracleTransactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="oracleDataSource" />
    </bean>

    <bean id="oracleMybatis" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="oracleDataSource" />
        <property name="configLocation" value="classpath:mybatis-config.xml" />        
    </bean>
    
    
   
    
    

        
</beans>
